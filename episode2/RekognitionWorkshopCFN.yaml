AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation template for workshop finding tweets for favority
  celebrites by scanning social media feeds using AWS Rekognition. **WARNING**
  This template creates AWS Resources - EC2 instance, Kinesis Firehose delivery
  stream, S3 bucket, DyanamoDB Table. You will be billed for the AWS resources
  used if you create a stack from this template.
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  TwitterConsumerKey:
    Description: 'Twitter Consumer Key, as generated by dev.twitter.com.'
    Type: String
  TwitterConsumerSecret:
    Description: 'Twitter Consumer Secret, as generated by dev.twitter.com'
    Type: String
  TwitterToken:
    Description: 'Twitter Access Token, as generated by dev.twitter.com.'
    Type: String
  TwitterTokenSecret:
    Description: 'Twitter Access Token Secret, as generated by dev.twitter.com'
    Type: String
  EmailAddress:
    Description: Email to where face match notifications will be sent
    Type: String
    Default: example@email.com
  PersonPhotoFilename:
    Description: >-
      Filename of the reference photo containing the favority celebrity.
      Rekognition will scan incoming photos for people that are similar to the
      person in this photo.
    Type: String
    Default: celebrity.jpg
  InstanceType:
    Description: Twitter EC2 Instance
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  AWSInstanceType2Arch:
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    m2.xlarge:
      Arch: HVM64
    m2.2xlarge:
      Arch: HVM64
    m2.4xlarge:
      Arch: HVM64
    m3.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-8c1be5f6
    us-west-2:
      HVM64: ami-e689729e
    us-west-1:
      HVM64: ami-31490d51
    us-east-2:
      HVM64: ami-c5062ba0
    eu-west-1:
      HVM64: ami-acd005d5
Resources:
  TwitterEC2Instance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        config:
          files:
            /home/ec2-user/rekognition-workshop/twitter-rekognition.config:
              content: !Join 
                - ''
                - - |
                    [keys] 
                  - 'consumer_key = '
                  - !Ref TwitterConsumerKey
                  - |+

                  - 'consumer_secret = '
                  - !Ref TwitterConsumerSecret
                  - |+

                  - 'access_token = '
                  - !Ref TwitterToken
                  - |+

                  - 'access_token_secret = '
                  - !Ref TwitterTokenSecret
                  - |+

                  - |+

                  - |
                    [s3]
                  - 'twitter_bucket = '
                  - !Ref TwitterS3Bucket
                  - |+

                  - |+

                  - |
                    [firehose]
                  - 'deliverystream_name = '
                  - !Ref FirehoseDeliveryStream
                  - |+

                  - |+

                  - |
                    [dynamodb]
                  - 'twitter_table = '
                  - !Ref TwitterDDBTable
                  - ''
              mode: '000771'
              owner: ec2-user
              group: ec2-user
            /home/ec2-user/rekognition-workshop/twitter_streaming.py:
              source: >-
                https://s3-eu-west-1.amazonaws.com/serverlessbytes.la/twitter_streaming.py
              mode: '000771'
              owner: ec2-user
              group: ec2-user
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref RekognitionWorkshopInstanceProfile
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe 
            - |
              exec > >(tee /var/log/user-data.log|logger -t user-data ) 2>&1 
            - 'echo BEGIN '
            - |
              date '+%Y-%m-%d %H:%M:%S'
            - |
              # Install the files and packages from the metadata
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource TwitterEC2Instance '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

            - |
              sudo su root 
            - |
              mkdir -p /home/ec2-user/rekognition-workshop 
            - |
              chmod -R 777 /home/ec2-user/rekognition-workshop
            - |
              yum -y update 
            - |
              pip install twitter 
            - |
              pip install textblob 
            - |
              pip install boto3 
            - |
              # Signal the status from cfn-init
            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource TwitterEC2Instance '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

            - 'echo END '
            - |
              date '+%Y-%m-%d %H:%M:%S'
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
  FaceMatchNotifyTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: FaceMatchNotifyTopic
  FaceMatchNotifySubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint: !Ref EmailAddress
      Protocol: email
      TopicArn: !Ref FaceMatchNotifyTopic
  TwitterS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Join 
        - '-'
        - - !Ref 'AWS::StackName'
          - twitter-workshop
          - !Ref 'AWS::AccountId'
          - !Ref 'AWS::Region'
      NotificationConfiguration:
        LambdaConfigurations:
          - Function: !GetAtt 
              - TwitterLambdaFunction
              - Arn
            Event: 's3:ObjectCreated:*'
  RekognitionS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Join 
        - '-'
        - - !Ref 'AWS::StackName'
          - rekognition-workshop
          - !Ref 'AWS::AccountId'
          - !Ref 'AWS::Region'
      NotificationConfiguration:
        LambdaConfigurations:
          - Function: !GetAtt 
              - RekognitionLambdaFunction
              - Arn
            Event: 's3:ObjectCreated:*'
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: images/
  RekBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref RekognitionS3Bucket
      PolicyDocument:
        Statement:
          - Action: 's3:GetObject'
            Effect: Allow
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref RekognitionS3Bucket
                - /images/*
            Principal: '*'
  FirehoseDeliveryStream:
    Type: 'AWS::KinesisFirehose::DeliveryStream'
    Properties:
      S3DestinationConfiguration:
        BucketARN: !Join 
          - ''
          - - 'arn:aws:s3:::'
            - !Ref TwitterS3Bucket
        BufferingHints:
          IntervalInSeconds: '60'
          SizeInMBs: '5'
        CompressionFormat: UNCOMPRESSED
        Prefix: firehose/
        RoleARN: !GetAtt 
          - FirehoseDeliveryRole
          - Arn
  FirehoseDeliveryRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref 'AWS::AccountId'
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref TwitterS3Bucket
                  - !Join 
                    - ''
                    - - !Join 
                        - ''
                        - - 'arn:aws:s3:::'
                          - !Ref TwitterS3Bucket
                      - /*
        - PolicyName: CloudWatch
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudwatch:*'
                  - 'cloudwatchlogs:*'
                Resource:
                  - '*'
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:*'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource: 'arn:aws:s3:::*'
              - Effect: Allow
                Action: 'sns:*'
                Resource: !Ref FaceMatchNotifyTopic
              - Effect: Allow
                Action: 'dynamodb:*'
                Resource: !GetAtt 
                  - TwitterDDBTable
                  - Arn
              - Effect: Allow
                Action:
                  - 'rekognition:CompareFaces'
                  - 'rekognition:DetectFaces'
                  - 'rekognition:DetectLabels'
                Resource: '*'
  TwitterLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: serverlessbytes.la
        S3Key: TwitterDDB.zip
      Description: Extract Twitter feed attributes and store them in DynamoDB
      FunctionName: lambda_function
      Handler: lambda_function.lambda_handler
      Role: !GetAtt 
        - LambdaExecutionRole
        - Arn
      Runtime: python3.6
      Timeout: 120
      Environment:
        Variables:
          S3RekBucket: !Join 
            - '-'
            - - !Ref 'AWS::StackName'
              - rekognition-workshop
              - !Ref 'AWS::AccountId'
              - !Ref 'AWS::Region'
      MemorySize: 1280
  RekognitionLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: serverlessbytes.la
        S3Key: compareFaces.zip
      Description: Compare faces from twitter feed using Rekognition
      Handler: lambda_function.lambda_handler
      Role: !GetAtt 
        - LambdaExecutionRole
        - Arn
      Runtime: python2.7
      Timeout: 120
      Environment:
        Variables:
          S3RekBucket: !Join 
            - '-'
            - - !Ref 'AWS::StackName'
              - rekognition-workshop
              - !Ref 'AWS::AccountId'
              - !Ref 'AWS::Region'
          RefPhoto: !Ref PersonPhotoFilename
          SNSArn: !Ref FaceMatchNotifyTopic
      MemorySize: 1280
  LambdaInvokePermissionRekognition:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt 
        - RekognitionLambdaFunction
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Join 
        - ':'
        - - arn
          - aws
          - s3
          - ''
          - ''
          - !Join 
            - '-'
            - - !Ref 'AWS::StackName'
              - rekognition-workshop
              - !Ref 'AWS::AccountId'
              - !Ref 'AWS::Region'
  LambdaInvokePermissionTwitter:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt 
        - TwitterLambdaFunction
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Join 
        - ':'
        - - arn
          - aws
          - s3
          - ''
          - ''
          - !Join 
            - '-'
            - - !Ref 'AWS::StackName'
              - twitter-workshop
              - !Ref 'AWS::AccountId'
              - !Ref 'AWS::Region'
  TwitterDDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: id_str
          AttributeType: S
      KeySchema:
        - AttributeName: id_str
          KeyType: HASH
      TableName: rekognitionTable
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
  RekognitionWorkshopInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref RekognitionWorkshopRole
  RekognitionWorkshopRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
  RekognitionWorkshopRolePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: RekognitionWorkshopRolePolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'cloudwatch:*'
              - 'cloudwatchlogs:*'
              - 's3:*'
              - 'firehose:*'
            Resource:
              - '*'
      Roles:
        - !Ref RekognitionWorkshopRole
Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref TwitterEC2Instance
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt 
      - TwitterEC2Instance
      - AvailabilityZone
  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt 
      - TwitterEC2Instance
      - PublicDnsName
  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt 
      - TwitterEC2Instance
      - PublicIp
